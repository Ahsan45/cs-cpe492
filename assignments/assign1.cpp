#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <time.h>

int NUMP, NUMC, NUMPP, Q_SIZE, QUANTUM


class Product{
private:
    int id;
    int timestamp;
    int life;

public:
    Product(int id, clock_t timestamp, int seed){
        this.id = id;
        this.timestamp = timestamp;
        this.life = srand(seed) % 1024;
    }
};


// • P1: Number of producer threads
// • P2: Number of consumer threads
// • P3: Total number of products to be generated by all producer threads
// • P4: Size of the queue to store products for both producer and consumer threads (0 for
// unlimited queue size)
// • P5: 0 or 1 for type of scheduling algorithm: 0 for First-Come-First-Serve, and 1 for
// Round-Robin
// • P6: Value of quantum used for round-robin scheduling
// • P7: Seed for random number generator

int main(int argc, char* argv[]){
    // for (int i = 0; i < argc; ++i)
    //     std::cout << argv[i] << "\n";
    NUMP = atoi(argv[1]);
    NUMC = atoi(argv[2]);
    NUMPP = atoi(argv[3]);
    Q_SIZE = atoi(argv[4]);
    scheduling_algo = atoi(argv[5]);
    QUANTUM = atoi(argv[6]);
    rand_seed = atoi(argv[7]);

    clock_t start, end;
    start = clock();
    
    // Create prod threads

    // initialize/join prod threads

    //create consumer threads

    // join consumer threads

    // delete everything

    return 0;
}